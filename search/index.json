[{"content":"1.文档位置 放在hugo文件夹下的content\u0026ndash;\u0026gt;post文件夹下 在这里创建文档文件夹，文件夹的目录结构如下 文章内容的文件名称需要是index 2.文章设置 文章开头需要用俩根横线(markdown语法3个+或者3个-)，把设置内容隔开 image是封面图片 3.友情链接设置 在content\u0026ndash;\u0026gt;page文件夹找到links文件夹，打开里面的文档 在横线内，按照格式输入即可 ","date":"2025-05-26T00:00:00Z","image":"https://coolestzero.github.io/p/hugo%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/wallhaven-vqv3ml_hu_68d7199e072276c.jpg","permalink":"https://coolestzero.github.io/p/hugo%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/","title":" HUGO发布博客"},{"content":"HUGO + Github 部署博客 参考资料：https://letere-gzj.github.io/hugo-stack/p/hugo/custom-blog/ 本文记录一下部署过程的一些踩坑点 一、安装环境 下载Git Git官网 ,下载 Git for Windows/x64 Setup. 按提示默认安装，基本点下一步就行 下载HUGO HUGO Github , 选最新版本，下载解压 Windows下载版本：hugo_extended_xxxxx_windows_amd64.zip 二、搭建博客 创建博客 (1) 在hugo.exe所在文件夹的地址栏敲打cmd，然后Enter唤起命令行 (2) 输入命令hugo new site xxxx创建hugo文件，xxxx 是文件夹的英文名称，这里创建的名称是dev (3) 输入命名cd xxxx切换目录，因为新建的文件夹没有hugo.exe，接下来要在新文件夹使用hugo.exe，所以要把hugo.exe复制到刚生成的文件夹中 (4) 输入命令hugo server -D启动服务，访问http://localhost:1313，Ctrl+C停止服务 （hugo默认是没有主题的，需要进行主题配置） 配置主题 (1) 前往Hugo Themes，查找自己喜欢的主题，进行下载 (2) 这里主题使用hugo-theme-stack，下载最新版，将下载好的主题解压，放到dev文件夹的/themes文件夹中 (3) 将主题文件夹里的exampleSite样例数据中的 Content 和 hugo.yaml 复制到主文件夹dev中，并删掉dev文件夹里的hugo.toml和content/post/rich-content（这个文件是引用油管的视频） (4) 修改 hugo.yaml 中的 theme，将其修改为跟主题文件夹同名 (5) 再次启动hugo服务，查看主题，具体主题配置修改 hugo.yaml，感兴趣可自行查找相关文章，下面是个人使用的设置 三、Github 部署 常规部署 (1) 前往【Github官网】，创建仓库 {github用户名}.github.io，也可以是别的名称 (2) 前往Setting -\u0026gt; Pages -\u0026gt; Branch选择main分支，然后保存，会自动开启 https://{github用户名}.github.io 的地址，这地址也是以后访问博客的地址 需要修改hugo.yaml的url信息，将 baseurl 修改成创建的github地址 (3) 回到hugo文件夹中，打开CMD执行命令hugo -D，会生成 public 静态资源文件夹 (4) 在 public 文件夹打开CMD，执行以下命令上传到github仓库上，第一次上传需要输入账号密码，先在命令行输入git 邮箱账号 git config --global user.email \u0026quot;你的邮箱@example.com\u0026quot; git config --global user.name \u0026quot;你的名字\u0026quot; 在 public 文件输入git代码 1 2 3 4 5 6 git init git add . //这里选择添加全部文件 git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main (5) 上传成功后访问 https://{github用户名}.github.io 成功搭建属于自己的Hugo博客 Github Action自动部署 私有仓库的核心作用：\n👉 让你只需专注写 Markdown，剩下的（生成 HTML、部署）全部自动化完成，同时备份所有源码。 (1) Github创建一个新的私有仓库 (例如hugo-main)，用于存放Hugo的主文件，文章 (2) 前往主页，点击头像，Setttings -\u0026gt; Developer Settings -\u0026gt; Personal access tokens，创建一个token(classic) (3) token选择永不过期，并勾选 repo 和 workflow 选项 (4) 为保证安全，将生成的token，保存的仓库的变量中，前往Settings -\u0026gt; Secrets and variables -\u0026gt; Actions中设置 (5) 在hugo主文件创建一个.github/workflows/xxxx.yaml文件，将以下内容复制进去，想具体了解更多，可查看【Github Action文档]】 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.你的token变量名 }} EXTERNAL_REPOSITORY: 你的github名/你的仓库名 PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: auto deploy (6) 在hugo主文件创建.gitignore文件，来避免提交不必要的文件 1 2 3 4 5 6 # 不需要自动生成的文件 public resources .hugo_build.lock # 不需要hugo命令 hugo.exe (7) 在hugo文件夹打开CMD，将hugo的主文件上传到仓库，上传成功后会触发Github Action，来自动部署你的静态页面 会忽略上面设置的文件 1 2 3 4 5 6 git init git add . //这里选择添加全部文件 git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main (8) 批处理脚本简化部署流程，创建txt，将部署的cmd 命令写入，修改txt格式为bat 1 2 3 4 5 @echo off cd /d D:\\blog\\dev git add . git commit -m \u0026#34;update\u0026#34; git push ","date":"2025-05-25T00:00:00Z","image":"https://coolestzero.github.io/p/hugo--github-%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/wallhaven-vqv3ml_hu_e95a4276bf860a84.jpg","permalink":"https://coolestzero.github.io/p/hugo--github-%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/","title":" HUGO + Github 部署博客"}]